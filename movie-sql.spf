<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>ContentFilters</key>
	<dict/>
	<key>auto_connect</key>
	<true/>
	<key>data</key>
	<dict>
		<key>connection</key>
		<dict>
			<key>database</key>
			<string>Movies</string>
			<key>host</key>
			<string>localhost</string>
			<key>name</key>
			<string>localhost</string>
			<key>rdbms_type</key>
			<string>mysql</string>
			<key>sslCACertFileLocation</key>
			<string></string>
			<key>sslCACertFileLocationEnabled</key>
			<integer>0</integer>
			<key>sslCertificateFileLocation</key>
			<string></string>
			<key>sslCertificateFileLocationEnabled</key>
			<integer>0</integer>
			<key>sslKeyFileLocation</key>
			<string></string>
			<key>sslKeyFileLocationEnabled</key>
			<integer>0</integer>
			<key>type</key>
			<string>SPSocketConnection</string>
			<key>useSSL</key>
			<integer>0</integer>
			<key>user</key>
			<string>root</string>
		</dict>
		<key>session</key>
		<dict>
			<key>connectionEncoding</key>
			<string>utf8</string>
			<key>contentFilter</key>
			<dict/>
			<key>contentPageNumber</key>
			<integer>1</integer>
			<key>contentSelection</key>
			<data>
			YnBsaXN0MDDUAQIDBAUGJSZYJHZlcnNpb25YJG9iamVjdHNZJGFy
			Y2hpdmVyVCR0b3ASAAGGoKgHCBMUFRYaIVUkbnVsbNMJCgsMDxJX
			TlMua2V5c1pOUy5vYmplY3RzViRjbGFzc6INDoACgAOiEBGABIAF
			gAdUdHlwZVRyb3dzXxAdU2VsZWN0aW9uRGV0YWlsVHlwZU5TSW5k
			ZXhTZXTSFwsYGVxOU1JhbmdlQ291bnQQAIAG0hscHR5aJGNsYXNz
			bmFtZVgkY2xhc3Nlc1pOU0luZGV4U2V0oh8gWk5TSW5kZXhTZXRY
			TlNPYmplY3TSGxwiI1xOU0RpY3Rpb25hcnmiIiRYTlNPYmplY3Rf
			EA9OU0tleWVkQXJjaGl2ZXLRJyhUZGF0YYABAAgAEQAaACMALQAy
			ADcAQABGAE0AVQBgAGcAagBsAG4AcQBzAHUAdwB8AIEAoQCmALMA
			tQC3ALwAxwDQANsA3gDpAPIA9wEEAQcBEAEiASUBKgAAAAAAAAIB
			AAAAAAAAACkAAAAAAAAAAAAAAAAAAAEs
			</data>
			<key>contentSortColIsAsc</key>
			<true/>
			<key>contentViewport</key>
			<string>{{0, 0}, {1048, 574}}</string>
			<key>isToolbarVisible</key>
			<true/>
			<key>queries</key>
			<string>-- Select all columns and rows from the movies table

SELECT movies.id, movies.title, movies.genres
FROM movies ;

-- Select only the title and id of the first 10 rows

SELECT movies.id, movies.title
FROM movies
LIMIT 10 ;

-- Find the movie with the id of 485

SELECT movies.id, movies.title, movies.genres
FROM movies 
WHERE movies.id = 485 ;

-- Find the id (only that column) of the movie Made in America (1993)

SELECT movies.id
FROM movies
WHERE movies.title = 'Made in America (1993)';

-- Find the first 10 sorted alphabetically

SELECT movies.id, movies.title, movies.genres
FROM movies
ORDER BY movies.title
LIMIT 10 ;

-- Find all movies from 2002

SELECT movies.id, movies.title, movies.genres
FROM movies
WHERE  movies.title LIKE  '%(2002)%';

-- Find out what year the Godfather came out

SELECT movies.id, movies.title, movies.genres
FROM movies
WHERE movies.title LIKE 'Godfather%' ;

-- Without using joins find all the comedies

SELECT movies.id, movies.title, movies.genres
FROM movies
WHERE movies.genres LIKE '%Comedy%' ;

-- Find all comedies in the year 2000

SELECT movies.id, movies.title, movies.genres
FROM movies
WHERE movies.genres LIKE '%Comedy%' AND movies.title LIKE '%(2000)%';

-- Find any movies that are about death and are a comedy

SELECT movies.id, movies.title, movies.genres
FROM movies
WHERE movies.genres LIKE '%Comedy%' AND movies.title LIKE '%dead%';

-- Find any movies from either 2001 or 2002 with a title containing super

SELECT movies.id, movies.title, movies.genres
FROM movies
HAVING movies.title LIKE '%super%' AND (movies.title LIKE '%(2002)%' OR movies.title LIKE '%(2001)%');

-- Create a new table called actors (We are going to pretend the actor can only play in one movie). The table should include name, character name, foreign key to movies and date of birth at least plus an id field.

-- Pick 3 movies and create insert statements for 10 actors each. You should use the multi value insert statements

INSERT INTO actors(`name`, `character name`, `movie id`, `DOB`) 
VALUES 
	('Billy Bob', 'Jimmy Craig', '1', '04/20/1974'),
	('McLovin', 'Eugene', '1', '05/15/1985'),
	('Bobbie Smith', 'Louise Craiger', '1', '12/25/1990'),
	('Michael Scott', 'Darth Vader', '1', '08/04/1964'),
	('Sam Smith', 'John Jimmy', '2', '01/10/1964'),
	('Mark Mandlay', 'Yoda', '2', '03/14/1967'),
	('Kyle White', 'Kool-Aid Man', '2', '10/20/1974'),
	('Holly Aster', 'Snow White', '3', '04/22/1966'),
	('Brandon Black', 'George Oney', '3', '09/14/1965'),
	('Jane Janet', 'Poison Ivy', '3', '05/21/1994');

-- Create a new column in the movie table to hold the MPAA rating. UPDATE 5 different movies to their correct rating

UPDATE movies
SET `MPAA_rating` = 'PG'
WHERE movies.title = '%Jumanji%';

-- With Joins
	-- Find all the ratings for the movie Godfather, show just the title and the rating
	
		SELECT movies.title, ratings.rating
		FROM movies
		LEFT JOIN ratings ON ratings.movie_id = movies.id
		WHERE movies.title = "%Godfather%" ;
	
	-- Order the previous objective by newest to oldest
	
	
	
	-- Find the comedies from 2005 and get the title and imdbid from the links table
	
	
	
	-- Find all movies that have no ratings
	
	
	</string>
			<key>table</key>
			<string>movies</string>
			<key>view</key>
			<string>SP_VIEW_CUSTOMQUERY</string>
			<key>windowVerticalDividerPosition</key>
			<real>214</real>
		</dict>
	</dict>
	<key>encrypted</key>
	<false/>
	<key>format</key>
	<string>connection</string>
	<key>queryFavorites</key>
	<array/>
	<key>queryHistory</key>
	<array>
		<string>-- With Joins
	-- Find all the ratings for the movie Godfather, show just the title and the rating
	
		SELECT movies.title, ratings.rating
		FROM movies
		LEFT JOIN ratings ON ratings.movie_id = movies.id
		WHERE movies.title = "%Godfather%"</string>
		<string>-- With Joins
	-- Find all the ratings for the movie Godfather, show just the title and the rating
	
		SELECT movies.title, ratings.rating
		FROM movies
		LEFT JOIN ratings ON ratings.movie_id = movies.id
		WHERE movies.title = "%godfather%"</string>
		<string>-- Create a new column in the movie table to hold the MPAA rating. UPDATE 5 different movies to their correct rating

UPDATE movies
SET `MPAA_rating` = 'PG'
WHERE title = '%toy story%'</string>
		<string>-- Create a new column in the movie table to hold the MPAA rating. UPDATE 5 different movies to their correct rating

UPDATE movies
SET `MPAA_rating` = 'PG'
WHERE title = '%Jumanji%'</string>
		<string>-- Create a new column in the movie table to hold the MPAA rating. UPDATE 5 different movies to their correct rating

UPDATE movies
SET `MPAA_rating` = 'PG'
WHERE movies.title = '%Jumanji%'</string>
		<string>-- Create a new column in the movie table to hold the MPAA rating. UPDATE 5 different movies to their correct rating

UPDATE movies
SET `MPAA rating` = 'PG'
WHERE movies.title = '%Jumanji%'</string>
		<string>-- Create a new column in the movie table to hold the MPAA rating. UPDATE 5 different movies to their correct rating

UPDATE movies
SET `MPAA rating` = 'PG'
WHERE movies.title = '%jumanji%'</string>
		<string>-- Create a new column in the movie table to hold the MPAA rating. UPDATE 5 different movies to their correct rating

UPDATE movies
SET `MPAA rating` = ratings.rating
LEFT JOIN ratings ON movies.MPAA_ratings = ratings.rating
WHERE ratings.movie_id IN (movies.id = 1,2,3,4,5)</string>
		<string>-- Create a new column in the movie table to hold the MPAA rating. UPDATE 5 different movies to their correct rating

UPDATE movies
SET `MPAA rating` = ratings.rating
LEFT JOIN ratings ON movies.MPAA ratings = ratings.rating
WHERE ratings.movie_id IN (movies.id = 1,2,3,4,5)</string>
		<string>-- Create a new column in the movie table to hold the MPAA rating. UPDATE 5 different movies to their correct rating

UPDATE Movies
SET `MPAA rating` = ratings.rating
WHERE ratings.movie_id IN (1,2,3,4,5)</string>
		<string>-- Create a new column in the movie table to hold the MPAA rating. UPDATE 5 different movies to their correct rating

UPDATE Movies
SET `MPAA rating` = ratings.rating
WHERE movie_id IN (1,2,3,4,5)</string>
		<string>-- Create a new column in the movie table to hold the MPAA rating. UPDATE 5 different movies to their correct rating

UPDATE Movies
SET `MPAA rating` = ratings.rating
WHERE movie_id = 1,2,3,4,5</string>
		<string>"2','3','4','5"</string>
		<string>-- Create a new column in the movie table to hold the MPAA rating. UPDATE 5 different movies to their correct rating

UPDATE Movies
SET `MPAA rating` = ratings.rating
WHERE movie_id = '1',"2','3','4','5"</string>
		<string>-- Create a new column in the movie table to hold the MPAA rating. UPDATE 5 different movies to their correct rating

UPDATE Movies
SET `MPAA rating` = ratings.rating
WHERE movie_id = '1','2','3','4','5'</string>
		<string>-- Create a new table called actors (We are going to pretend the actor can only play in one movie). The table should include name, character name, foreign key to movies and date of birth at least plus an id field.

-- Pick 3 movies and create insert statements for 10 actors each. You should use the multi value insert statements


INSERT INTO actors(`name`, `character name`, `movie id`, `DOB`) 
VALUES 
	('Billy Bob', 'Jimmy Craig', '1', '04/20/1974'),
	('McLovin', 'Eugene', '1', '05/15/1985'),
	('Bobbie Smith', 'Louise Craiger', '1', '12/25/1990'),
	('Michael Scott', 'Darth Vader', '1', '08/04/1964'),
	('Sam Smith', 'John Jimmy', '2', '01/10/1964'),
	('Mark Mandlay', 'Yoda', '2', '03/14/1967'),
	('Kyle White', 'Kool-Aid Man', '2', '10/20/1974'),
	('Holly Aster', 'Snow White', '3', '04/22/1966'),
	('Brandon Black', 'George Oney', '3', '09/14/1965'),
	('Jane Janet', 'Poison Ivy', '3', '05/21/1994')</string>
		<string>-- Create a new column in the movie table to hold the MPAA rating. UPDATE 5 different movies to their correct rating</string>
		<string>-- Create a new table called actors (We are going to pretend the actor can only play in one movie). The table should include name, character name, foreign key to movies and date of birth at least plus an id field.

-- Pick 3 movies and create insert statements for 10 actors each. You should use the multi value insert statements


INSERT INTO actors(`name`, `character name`, `movie id`, `DOB`) 
VALUES 
	('Billy Bob', 'Jimmy Craig', '1', '04/20/1974'),
	('McLovin', 'Eugene', '1', '05/15/1985'),
	('Bobbie Smith', 'Louise Craiger', '1', '12/25/1990'),
	('Michael Scott', 'Darth Vader', '1', '08/04/1964'),
	('Sam Smith', 'John Jimmy', '2', '01/10/1964'),
	('Mark Mandlay', 'Yoda', '2', '03/14/1967'),
	('Kyle White', 'Kool-Aid Man', '3', '10/20/1974'),
	('Holly Aster', 'Snow White', '3', '04/22/1966'),
	('Brandon Black', 'George Oney', '3', '09/14/1965'),
	('Jane Janet', 'Poison Ivy', '2', '05/21/1994')</string>
		<string>-- Create a new table called actors (We are going to pretend the actor can only play in one movie). The table should include name, character name, foreign key to movies and date of birth at least plus an id field.

-- Pick 3 movies and create insert statements for 10 actors each. You should use the multi value insert statements


INSERT INTO actors(`name`, `character name`, `movie id`, `DOB`) 
VALUES 
	('Billy Bob', 'Jimmy Craig', '1', '04/20/1974'),
	('McLovin', 'Eugene', '1', '05/15/1985'),
	('Bobbie Smith', 'Louise Craiger', '1', '12/25/1990'),
	('Michael Scott', 'Darth Vader', '1', '08/04/1964'),
	('Sam Smith', 'John Jimmy', '2', '01/10/1964'),
	('Mark Mandlay', 'Yoda', '2', '03/14/1967'),
	('Kyle White', 'Kool-Aid Man', '3', '10/20/1974'),
	('Holly Aster', 'Snow White', '3', '04/22/1966'),
	('Brandon Black', 'George Oney', '3', '09/14/1965')</string>
		<string>-- Create a new table called actors (We are going to pretend the actor can only play in one movie). The table should include name, character name, foreign key to movies and date of birth at least plus an id field.

-- Pick 3 movies and create insert statements for 10 actors each. You should use the multi value insert statements


INSERT INTO actors(`name`, `character name`, `movie id`, `DOB`) 
VALUES 
	('Billy Bob', 'Jimmy Craig', '1', '04/20/1974'),
	('McLovin', 'Eugene', '1', '05/15/1985'),
	('Bobbie Smith', 'Louise Craiger', '1', '12/25/1990'),
	('Michael Scott', 'Darth Vader', '1', '08/04/1964'),
	('Billy Bob', 'Jimmy Craig', '2', '01/10/1964'),
	('Billy Bob', 'Jimmy Craig', '2', '03/14/1967'),
	('Billy Bob', 'Jimmy Craig', '3', '10/20/1974'),
	('Billy Bob', 'Jimmy Craig', '3', '04/22/1966'),
	('Billy Bob', 'Jimmy Craig', '3', '09/14/1965')</string>
	</array>
	<key>rdbms_type</key>
	<string>mysql</string>
	<key>rdbms_version</key>
	<string>5.7.21</string>
	<key>version</key>
	<integer>1</integer>
</dict>
</plist>
